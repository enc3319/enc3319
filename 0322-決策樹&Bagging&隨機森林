from sklearn.datasets import load_iris
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import pandas as pd
from sklearn import tree
from sklearn import metrics


data = load_iris()
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target


# dataframe method
# X_train, X_test, y_train, y_test = train_test_split(df[data.feature_names], df['target'], random_state=0)

# bonuch data set
X_train, X_test, y_train, y_test = train_test_split(data.data, data.target, random_state=0)


# Step 1: Import the model you want to use
# from sklearn.tree import DecisionTreeClassifier

# Step 2: Make an instance of the Model
clf = DecisionTreeClassifier(max_depth = 3, random_state = 0)
# clf = DecisionTreeClassifier()

# Step 3: Train the model on the data
clf.fit(X_train,y_train)

# Step 4: Predict labels of unseen (test) data
clf_predict = clf.predict(X_test)

accuracy1 = metrics.accuracy_score(y_test,clf_predict)
print('*'*10)
print(accuracy1)

print(clf.score(X_train,y_train))
print(clf.score(X_test,y_test))




# BaggingClassifier
from sklearn.ensemble import BaggingClassifier

tree1 = DecisionTreeClassifier()
bag = BaggingClassifier(tree1, n_estimators=300, max_samples=0.60, random_state=1)  # max_samples 樣本取樣率

bag.fit(X_train,y_train)

bag_predict = bag.predict(X_test)

accuracy2 = metrics.accuracy_score(y_test,bag_predict)
print('*'*10)
print(accuracy2)

print(bag.score(X_train,y_train))
print(bag.score(X_test,y_test))




# RandomForestClassifier
from sklearn.ensemble import RandomForestClassifier

RandomForest_model = RandomForestClassifier(n_estimators=100, random_state=0)

RandomForest_model.fit(X_train,y_train)

forest_predict = RandomForest_model.predict(X_test)

accuracy3 = metrics.accuracy_score(y_test,forest_predict)
print('*'*10)
print(accuracy3)

print(RandomForest_model.score(X_train,y_train))
print(RandomForest_model.score(X_test,y_test))
