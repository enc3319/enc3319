import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
import numpy as np
from sklearn import metrics
from sklearn import neighbors


iris = load_iris()
iris_X = iris.data
iris_y = iris.target

train_X,test_X,train_y,test_y = train_test_split(iris_X,iris_y,test_size=0.3, random_state=2)  # train_X 共有105筆資料

range = np.arange(1,round(0.2*train_X.shape[0])+1)  # 105*0.2=21  # range 的範圍為 (1,21+1)

print(range)

accuracies=[]

for i in range:  #1-21
    knn_clf       = neighbors.KNeighborsClassifier(n_neighbors=i)  # 用 for 迴圈找出最適合的 n_neighbors 參數
    knn_clf       = knn_clf.fit(train_X,train_y)
    knn_predicted = knn_clf.predict(test_X)
    accuracy      = metrics.accuracy_score(test_y,knn_predicted)   # 準確率分數
    accuracies.append(accuracy)                                    # 將分數添加進串列

print(accuracies)

plt.scatter(range,accuracies)
plt.show()

appr_k = accuracies.index(max(accuracies))+1  # 模型分數最高的鄰居個數
# 0 1 2 3 4 5  index
# 1 2 3 4 5 6  number of neighbors  (index+1)

print(appr_k)
# print('accuracies = ',accuracies)
